package abolt.kinect;

import java.io.*;
import java.util.*;
import javax.swing.*;
import java.awt.*;
import java.awt.image.*;

import april.util.*;
import april.vis.*;

/** Read in a .pts file generated by the ObjectLabeler.
  * Will eventually support reading in multiple files.
  * Stores objects and label list along with colored
  * point data (x y z r g b)
  */
public class ObjectFileReader
{
    ArrayList<LabeledPointCloud> data = new ArrayList<LabeledPointCloud>();

    public ObjectFileReader(GetOpt opts)
    {
        assert (opts.getString("file") != null);
        FileInputStream fin = null;
        DataInputStream ins = null;
        try {
            fin = new FileInputStream(opts.getString("file"));
            ins = new DataInputStream(fin);
        } catch (Exception ex) {
            System.err.println("ERR: Problem construction input stream");
            ex.printStackTrace();
        }

        if (ins != null) {
            readInputFile(ins);
        }
    }

    public ObjectFileReader(DataInputStream ins)
    {
        readInputFile(ins);
    }

    // Parse .pts file
    private void readInputFile(DataInputStream ins)
    {
        BinaryStructureReader bsr = new BinaryStructureReader(ins);
        try {
            while (true) {
                ArrayList<String> labels = new ArrayList<String>();
                ArrayList<double[]> coloredPoints = new ArrayList<double[]>();
                int nlabels = bsr.readInt();
                bsr.blockBegin();
                for (int i = 0; i < nlabels; i++) {
                    labels.add(bsr.readString());
                }
                bsr.blockEnd();

                int npoints = bsr.readInt();
                bsr.blockBegin();
                for (int i = 0; i < npoints; i++) {
                    coloredPoints.add(bsr.readDoubles());
                }
                bsr.blockEnd();
                data.add(new LabeledPointCloud(labels, coloredPoints));
            }
        } catch (IOException ioex) {
            System.err.println("ERR: "+ioex);
        }
    }

    public ArrayList<LabeledPointCloud> getData()
    {
        return data;
    }

    static public BufferedImage convertToIm(LabeledPointCloud lpc)
    {
        int size = lpc.coloredPoints.size();
        int w = (int)Math.sqrt(size);
        BufferedImage im = new BufferedImage(w, w, BufferedImage.TYPE_INT_RGB);
        int[] buf = ((DataBufferInt)(im.getRaster().getDataBuffer())).getData();
        for (int i = 0; i < buf.length; i++) {
            int bgr = (int)(lpc.coloredPoints.get(i)[3]);
            int rgb = ((bgr & 0xff) << 16) |
                      (bgr & 0xff00) |
                      ((bgr & 0xff0000) >> 16);
            buf[i] = rgb;
        }

        return im;
    }

    static class PListen implements ParameterListener
    {
        VisWorld vw;
        ArrayList<LabeledPointCloud> d;
        int idx = 0;

        public PListen(ArrayList<LabeledPointCloud> d, VisWorld vw)
        {
            this.vw = vw;
            this.d  = d;
        }


        public void parameterChanged(ParameterGUI pg, String name)
        {
            if (name.equals("next")) {
                BufferedImage im = ObjectFileReader.convertToIm(d.get(idx));
                idx = (idx+1)%d.size();

                VisWorld.Buffer vb = vw.getBuffer("pixels");
                vb.addBack(new VzImage(im));
                vb.swap();
            }
        }
    }

    static public void main(String[] args)
    {
        GetOpt opts = new GetOpt();

        opts.addBoolean('h', "help", false, "Display this help screen");
        opts.addString('f', "file", null, ".pts file to read data from");

        if (!opts.parse(args)) {
            System.err.println("ERR: "+opts.getReason());
            System.exit(1);
        }

        if (opts.getBoolean("help")) {
            opts.doHelp();
            System.exit(1);
        }

        ObjectFileReader ofr = new ObjectFileReader(opts);
        System.out.printf("Recovered %d training examples\n", ofr.getData().size());
        ArrayList<LabeledPointCloud> d = ofr.getData();

        JFrame jf = new JFrame("Test");
        jf.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        jf.setLayout(new BorderLayout());
        jf.setSize(800,600);

        VisWorld vw = new VisWorld();
        VisLayer vl = new VisLayer(vw);
        VisCanvas vc = new VisCanvas(vl);

        ParameterGUI pg = new ParameterGUI();
        pg.addButtons("next", "Next");
        pg.addListener(new PListen(d, vw));

        jf.add(vc, BorderLayout.CENTER);
        jf.add(pg, BorderLayout.SOUTH);
        jf.setVisible(true);
    }

}
